#include <bits/stdc++.h>
using namespace std;
int i;
string s = "kundol";

/** 📌 포인터(pointer)
 * 메모리관리는 언어마다 조금은 다르게 관리가 됩니다.
 * Java, Python, JS 로는 개발자가 직접 변수에 메모리를 할당하거나 해제할 수 없고
 * `가비지컬렉터`를 통해 이를 수행합니다
 *
 * 하지만 하위레벨 언어인 C, C++ 등은 가비지컬렉터가 없으며,
 * 대신 개발자가 직접 필요한 메모리를 예약하고 해제할 수 있으며,
 * 포인터 또한 지원합니다.
 *
 * 변수의 메모리 주소를 담는 타입이 바로 포인터입니다.
 * 포인터는 메모리 동적할당, 데이터를 복사하지 않고,
 * 함수 매개변수로 사용, 클래스 및 구조체를 연결할 때 사용됩니다.
 */

/** 포인터 정의
 * `<타입> *` 형태로 포인터를 정의
 * C++에서 *라는 별표는 에스터리스크(asterisk operator)라고도 불립니다
 */
int main() {
  i = 0;

  // `int *a`는 `&i`라는 `i의 주소를 담는 포인터`를 정의한 것
  int *a = &i;
  cout << a << '\n';

  // string 타입 변수의 메모리주소를 담을 때는 `string *` 하고 선언을 해야 함
  string *b = &s;
  cout << b << '\n';
  return 0;
}

/** 포인터의 크기
 * 포인터의 크기는 OS가 32bit라면 4바이트, 64bit라면 8바이트로 고정되어있습니다.
 * 어떠한 타입이든(string, char, int 등) 상관없이
 * 무조건 4바이트 아니면 8바이트로 고정됩니다.
 * 이는 집 주소의 크기는 집의 크기와 관련이 없다는 것을 생각하시면 됩니다.
 *
 * 포인터의 크기는 고정되어있지 않으며 OS마다 다를 수 있습니다.
 * 보통 4바이트 또는 8바이트의 크기를 가집니다.
 * e.g. 1바이트짜리 char 타입의 변수의 포인터 크기는 1바이트가 아님
 */